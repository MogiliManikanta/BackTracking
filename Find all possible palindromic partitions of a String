Given a String S, Find all possible Palindromic partitions of the given String.
 

Example 1:

Input:
S = "geeks"
Output:
g e e k s
g ee k s
Explanation:
All possible palindromic partitions
are printed.
Example 2:

Input:
S = "madam"
Output:
m a d a m
m ada m
madam

Your Task:
You don't need to read input or print anything. Your task is to complete the function allPalindromicPerms() which takes a String S as input parameter and returns a list of lists denoting all the possible palindromic partitions in the order of their appearance in the original string.

 

Expected Time Complexity: O(N*2N)
Expected Auxiliary Space: O(N2), where N is the length of the String

 

Constraints:
1 <= |S| <= 20

//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String S = read.readLine();

            Solution ob = new Solution();
            ArrayList<ArrayList<String>> allPart = ob.allPalindromicPerms(S);
            
            for (int i=0; i<allPart.size(); i++)  
            { 
                for (int j=0; j<allPart.get(i).size(); j++) 
                { 
                    System.out.print(allPart.get(i).get(j) + " "); 
                } 
                System.out.println(); 
            } 
        }
    }
}
// } Driver Code Ends

class Solution {
    static ArrayList<ArrayList<String>> allPalindromicPerms(String S) {
             ArrayList<String> list = new ArrayList<>();
             ArrayList<ArrayList<String>> result = new ArrayList<>();
             form(S,list,result,0);
             return result;
    }
    static void form(String s, ArrayList<String> list,  ArrayList<ArrayList<String>> result, int index){
           if(index == s.length()){
               result.add(new ArrayList<>(list));
               return;
           }
           String temp = "";
           for(int i = index; i< s.length(); i++){
                 temp+= s.charAt(i);
                 if(isPalin(temp)){ 
                  list.add(temp);  
                     form(s,list,result,i+1);
                     list.remove(list.size()-1);
                 }
                 else continue;
           }
    }
    static boolean isPalin(String tocheck){
        if(tocheck.length() < 2) return true;
       int i = 0;int j = tocheck.length()-1;
       while(i < j){
           if(tocheck.charAt(i) != tocheck.charAt(j)) return false;
           i++; j--;
       }
       return true;
    }};

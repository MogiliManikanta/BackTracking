The n-queens puzzle is the problem of placing n queens on a (n×n) chessboard such that no two queens can attack each other.
Given an integer n, find all distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the n-queens’ placement, where the solutions are a permutation of [1,2,3..n] in increasing order, here the number in the ith place denotes that the ith-column queen is placed in the row with that number. For eg below figure represents a chessboard [3 1 4 2].



 

Example 1:

Input:
1
Output:
[1]
Explaination:
Only one queen can be placed 
in the single cell available.
Example 2:

Input:
4
Output:
[2 4 1 3 ] [3 1 4 2 ]
Explaination:
These are the 2 possible solutions.
 

Your Task:
You do not need to read input or print anything. Your task is to complete the function nQueen() which takes n as input parameter and returns a list containing all the possible chessboard configurations in sorted order. Return an empty list if no solution exists.

 

Expected Time Complexity: O(n!)
Expected Auxiliary Space: O(n2) 

 

Constraints:
1 ≤ n ≤ 10 

//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
import java.lang.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0) {
            int n = Integer.parseInt(in.readLine());
            
            Solution ob = new Solution();
            ArrayList<ArrayList<Integer>> ans = ob.nQueen(n);
            if(ans.size() == 0)
                System.out.println("-1");
            else {
                for(int i = 0;i < ans.size();i++){
                    System.out.print("[");
                    for(int j = 0;j < ans.get(i).size();j++)
                        System.out.print(ans.get(i).get(j) + " ");
                    System.out.print("] ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution{
    static ArrayList<ArrayList<Integer>> nQueen(int n) {
        //character array to place n queens
        char[][] ch= new char[n][n];
        //This is to return the integers(index+1) at a given column. basically our return type 
        ArrayList<ArrayList<Integer>> ans= new ArrayList<>();
        //This 0 represent the column at o index initially
        placeNQueens(ans,ch,0);
        return ans;
        
    }
    
    public static void placeNQueens(ArrayList<ArrayList<Integer>> ans, char[][] ch, int col){
        
        //baseCase
        if(col==ch.length){
            convertChToAns(ch,ans);
            return;
        }
        
        for(int row=0;row<ch.length;row++){
            if(isSafeToPlace(ch,row,col)){
                ch[row][col]='Q';
                placeNQueens(ans, ch, col+1);
                //default char value;
                ch[row][col]='\u0000';
            }
            
        }
        
    }
    // This order of loop is very important to match the answers
    public static void convertChToAns(char[][] ch, ArrayList<ArrayList<Integer>> ans ){
        ArrayList<Integer> nums= new ArrayList<>();
        for(int col=0;col< ch.length;col++){
            for(int row=0;row<ch.length;row++){
                if(ch[row][col]=='Q'){
                    nums.add(row+1);
                }
            }
            }
        ans.add(nums);
    }
    public static boolean isSafeToPlace(char[][] ch, int row, int col)
    {
        int rowTemp=row;
        int colTemp=col;
        
        // left check
        while(colTemp>=0){
            if(ch[rowTemp][colTemp]=='Q'){
                return false;
            }
            colTemp--;
        }
        colTemp=col;
        rowTemp=row;
        //upper diagonal check
        while(colTemp>=0 && rowTemp>=0){
            if(ch[rowTemp][colTemp]=='Q')
            return false;
            
            rowTemp--;
            colTemp--;
            }
        colTemp= col;
        rowTemp=row;
        //lower diagonal check 
        while(rowTemp<ch.length && colTemp>=0){
            if(ch[rowTemp][colTemp]=='Q'){
                return false;
            }
            rowTemp++;
            colTemp--;
        }
        
        return true;
    }
}
